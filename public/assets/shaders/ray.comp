#ifndef RAY_INC
#define RAY_INC

struct Ray {
  vec3  origin;
  vec3  direction;
  float time;
};

struct HitRecord {
  vec3  p;
  vec3  normal;
  float t;
  vec2  uv;
  bool  frontFace;
  uint  materialIndex;
};

void setFaceNormal(inout HitRecord rec, const Ray r, const vec3 outwardNormal) {
  rec.frontFace = dot(r.direction, outwardNormal) < 0.0;
  rec.normal    = rec.frontFace ? outwardNormal : -outwardNormal;
}

vec3 rayAt(const Ray ray, const float t) {
  return ray.origin + t * ray.direction;
  // return ray.origin + ray.direction * t;
}

Ray transformRay(const Ray ray, mat4 objectToWorld) {
  mat4 rotationMatrix = mat4(
      objectToWorld[0],
      objectToWorld[1],
      objectToWorld[2],
      vec4(0.0, 0.0, 0.0, 1.0));

  return Ray(
      (inverse(objectToWorld) * vec4(ray.origin, 1.0)).xyz,
      (inverse(rotationMatrix) * vec4(ray.direction, 1.0)).xyz,
      // ray.direction,
      ray.time);
}

void transformRecord(inout HitRecord rec, mat4 objectToWorld) {
  rec.p = (objectToWorld * vec4(rec.p, 1.0)).xyz;
  // mat3 normalMatrix = transpose(inverse(mat3(primitve.objectToWorld)));
  // mat3 normalMatrix = /*transpose*/ (inverse(mat3(rotationMatrix)));
  // vec3 transformedN = normalMatrix * rec.normal;
  // vec3 transformedN = (rotationMatrix * vec4(rec.normal, 1.0)).xyz;
  // setFaceNormal(rec, transformedRay, normalize(transformedN));
}

#endif  //RAY_INC
