#ifndef MATERIALS_INC
#define MATERIALS_INC

#extension GL_GOOGLE_include_directive : enable
#include "utils.comp"
#include "ray.comp"

#define MATERIAL_LAMBERT 0.8
#define MATERIAL_METAL 0.95
#define MATERIAL_DIELECTRIC 1

float schlick(float cosine, float refractIdx) {
  float r0 = (1.0 - refractIdx) / (1.0 + refractIdx);
  r0       = r0 * r0;
  return r0 + (1.0 - r0) * pow(1.0 - cosine, 5.0);
}

bool materialBSDF(const Ray r_in, const HitRecord rec, out vec3 attenuation, out Ray scattered) {
  if (rec.materialType < MATERIAL_LAMBERT) {
    vec3 scatterDirection = rec.normal + randomUnitVector();
    scattered             = Ray(rec.p, scatterDirection, r_in.time);
    attenuation           = rec.albedo;
    return true;
  } else if (rec.materialType < MATERIAL_METAL) {
    vec3 reflected = reflect(normalize(r_in.direction), rec.normal);
    scattered      = Ray(rec.p, reflected + rec.roughness * randomInUnitSphere(), r_in.time);
    attenuation    = rec.albedo;
    return (dot(scattered.direction, rec.normal) > 0.0);
  } else {
    attenuation          = vec3(1.0, 1.0, 1.0);
    float etai_over_etat = rec.frontFace ? (1.0 / rec.refractIdx) : rec.refractIdx;
    vec3  unit_direction = normalize(r_in.direction);
    float cos_theta      = min(dot(-unit_direction, rec.normal), 1.0);
    float sin_theta      = sqrt(1.0 - cos_theta * cos_theta);

    if (etai_over_etat * sin_theta > 1.0) {
      vec3 reflected = reflect(unit_direction, rec.normal);
      scattered      = Ray(rec.p, reflected, r_in.time);
      return true;
    }

    float reflect_prob = schlick(cos_theta, etai_over_etat);
    if (random() < reflect_prob) {
      vec3 reflected = reflect(unit_direction, rec.normal);
      scattered      = Ray(rec.p, reflected, r_in.time);
      return true;
    }

    vec3 refracted = refract(unit_direction, rec.normal, etai_over_etat);
    scattered      = Ray(rec.p, refracted, r_in.time);
    return true;
  }

  return false;
}

#endif  //MATERIALS_INC
