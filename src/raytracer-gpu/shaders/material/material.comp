#ifndef MATERIAL_INC
#define MATERIAL_INC

#extension GL_GOOGLE_include_directive : enable

#define MATERIALTYPE_LAMBERTIAN 0
#define MATERIALTYPE_METAL 1
#define MATERIALTYPE_DIELECTRIC 2
#define MATERIALTYPE_ISOTROPIC 3
#define MATERIALTYPE_DIFFUSELIGHT 4

#include "../utils.comp"
#include "../ray.comp"
#include "./material_base.comp"

#include "./lambertian.comp"
#include "./metal.comp"
#include "./dielectric.comp"
#include "./diffuselight.comp"

bool materialScatter(const Ray ray, const HitRecord rec, out vec3 attenuation, out Ray scattered) {
  uint materialIndex = rec.materialIndex;

  Material material     = materials[materialIndex];
  uint     materialType = material.materialType;

  if (rec.isoTropicMaterial) {
    attenuation = vec3(1.0, 0.0, 0.0);
    return true;
  } else {
    switch (materialType) {
      case MATERIALTYPE_LAMBERTIAN:
        return lambertianScatter(material, ray, rec, attenuation, scattered);
        break;
      case MATERIALTYPE_METAL:
        return metalScatter(material, ray, rec, attenuation, scattered);
        break;
      case MATERIALTYPE_DIELECTRIC:
        return dielectricScatter(material, ray, rec, attenuation, scattered);
        break;
    }
  }

  return false;
}

vec3 materialEmitted(const Ray ray, const HitRecord rec) {
  uint materialIndex = rec.materialIndex;

  Material material     = materials[materialIndex];
  uint     materialType = material.materialType;

  switch (materialType) {
    case MATERIALTYPE_DIFFUSELIGHT:
      return diffuseLightEmitted(material, rec);
      break;
  }

  return vec3(0.0, 0.0, 0.0);
}

#endif  //MATERIAL_INC
