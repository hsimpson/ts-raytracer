#ifndef DIELECTRICMATERIAL_INC
#define DIELECTRICMATERIAL_INC

#extension GL_GOOGLE_include_directive : enable

#include "../utils.comp"
#include "../ray.comp"
#include "./material_base.comp"

float schlick(float cosine, float refractIdx) {
  float r0 = (1.0 - refractIdx) / (1.0 + refractIdx);
  r0       = r0 * r0;
  return r0 + (1.0 - r0) * pow(1.0 - cosine, 5.0);
}

bool dielectricScatter(const Material material, const Ray ray, const HitRecord rec, out vec3 attenuation, out Ray scattered) {
  attenuation          = vec3(1.0, 1.0, 1.0);
  float etai_over_etat = rec.frontFace ? (1.0 / material.indexOfRefraction) : material.indexOfRefraction;
  vec3  unit_direction = normalize(ray.direction);
  float cos_theta      = min(dot(-unit_direction, rec.normal), 1.0);
  float sin_theta      = sqrt(1.0 - cos_theta * cos_theta);

  if (etai_over_etat * sin_theta > 1.0) {
    vec3 reflected = reflect(unit_direction, rec.normal);
    scattered      = Ray(rec.p, reflected, ray.time);
    return true;
  }

  float reflect_prob = schlick(cos_theta, etai_over_etat);
  if (random() < reflect_prob) {
    vec3 reflected = reflect(unit_direction, rec.normal);
    scattered      = Ray(rec.p, reflected, ray.time);
    return true;
  }

  vec3 refracted = refract(unit_direction, rec.normal, etai_over_etat);
  scattered      = Ray(rec.p, refracted, ray.time);
  return true;
}

#endif  //DIELECTRICMATERIAL_INC
