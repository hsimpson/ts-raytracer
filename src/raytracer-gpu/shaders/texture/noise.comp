#ifndef NOISE_INC
#define NOISE_INC

#extension GL_GOOGLE_include_directive : enable

#include "./perlin_static.comp"
#include "./texture_base.comp"
#include "../utils.comp"

float trilinearInterp(vec3[3][3][3] c, float u, float v, float w) {
  // vec3  uuvvww = uvw * uvw * (3.0 - 2.0 * uvw);
  float uu    = u * u * (3.0 - 2.0 * u);
  float vv    = v * v * (3.0 - 2.0 * v);
  float ww    = w * w * (3.0 - 2.0 * w);
  float accum = 0.0;

  for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 2; j++) {
      for (int k = 0; k < 2; k++) {
        vec3 weight = vec3(u - float(i), v - float(j), w - float(k));
        // clang-format off
        accum += (float(i) * uu + (1.0 - float(i)) * (1.0 - uu))
                *(float(j) * vv + (1.0 - float(j)) * (1.0 - vv))
                *(float(k) * ww + (1.0 - float(k)) * (1.0 - ww))
                * dot(c[i][j][k], weight);
        // clang-format on
      }
    }
  }

  return accum;
}

float noise(vec3 p) {
  float u = p.x - floor(p.x);
  float v = p.y - floor(p.y);
  float w = p.z - floor(p.z);

  u = u * u * (3.0 - 2.0 * u);
  v = v * v * (3.0 - 2.0 * v);
  w = w * w * (3.0 - 2.0 * w);

  int i = int(floor(p.x));
  int j = int(floor(p.y));
  int k = int(floor(p.z));

  vec3 c[3][3][3];

  for (int di = 0; di < 2; di++) {
    for (int dj = 0; dj < 2; dj++) {
      for (int dk = 0; dk < 2; dk++) {
        int lookup    = perlinRandom.permX[(i + di) & 255] ^ perlinRandom.permY[(j + dj) & 255] ^ perlinRandom.permZ[(k + dk) & 255];
        c[di][dj][dk] = perlinRandom.randomVecs[int(lookup)];
        float a       = 0.0;
      }
    }
  }

  float noise = trilinearInterp(c, u, v, w);
  return noise;
}

float turb(vec3 p) {
  float accum  = 0.0;
  vec3  tempP  = p;
  float weight = 1.0;

  const int depth = 7;

  for (int i = 0; i < depth; i++) {
    accum += weight * noise(tempP);
    weight *= 0.5;
    tempP = tempP * 2.0;
  }

  return abs(accum);
}

vec3 noiseTextureValue(const Texture textureObj, const vec2 uv, const vec3 p) {
  return vec3(1.0, 1.0, 1.0) * 0.5 * (1.0 + sin(textureObj.noiseScale * p.z + 10.0 * turb(p)));
}

#endif  //NOISE_INC