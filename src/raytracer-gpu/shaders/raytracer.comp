#version 460
#extension GL_GOOGLE_include_directive : enable

// #include "materials.comp"
#include "camera.comp"

#include "utils.comp"
#include "ray.comp"

//#define FLT_MAX 3.402823466e+38
#define FLT_MAX 99999.99
//const float INFINITY     = 1. / 0.;

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform ComputeParams {
  float fWidth;
  float fHeight;
  float fSamplesPerPixel;
  float fMaxBounces;
  float fRandomSeed;
}
params;

layout(std140, set = 0, binding = 2) buffer PixelBuffer {
  vec4 pixels[];
}
pixelBuffer;

#include "./hittable/hittable.comp"
#include "./material/material.comp"

vec3 rayColor(Ray ray, uint depth) {
  HitRecord rec;
  vec3      color    = vec3(1.0, 1.0, 1.0);
  vec3      skyColor = vec3(0.7, 0.8, 1.0);

  for (int i = 0; i < depth; i++) {
    if (hittableListHit(ray, 0.001, FLT_MAX, rec)) {
      Ray  newRay;
      vec3 attenuation;

      bool wasScattered = materialScatter(ray, rec, attenuation, newRay);

      ray.origin    = newRay.origin;
      ray.direction = newRay.direction;

      if (wasScattered) {
        color *= attenuation;
      } else {
        color *= vec3(0.0, 0.0, 0.0);
        break;
      }
    } else {
      // vec3  unit_direction = normalize(ray.direction);
      // float t              = 0.5 * (unit_direction.y + 1.0);
      // vec3  skyColor       = (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
      color *= skyColor;
      break;
    }

    // ivec2 o = hittableList[1].object;
    // color = vec3(o.xy, 1.0);
  }

  return color;
}

void main() {
  uvec3 index = gl_GlobalInvocationID;

  // float j = params.fHeight - (floor(float(index.x) / params.fWidth));
  // float i = mod(float(index.y), params.fWidth);
  float i = index.x;
  float j = params.fHeight - index.y;

  //initSeed(index * 1099087573U);
  initSeed(index.x * index.y * uint(floor(params.fRandomSeed * 1000000000U)));

  vec3 pixel_color = vec3(0.0, 0.0, 0.0);

  const uint ssp     = uint(params.fSamplesPerPixel);
  const uint bounces = uint(params.fMaxBounces);

  // for (int s = 0; s < ssp; s++) {
  float u = (i + random()) / (params.fWidth - 1.0);
  float v = (j + random()) / (params.fHeight - 1.0);
  Ray   r = cameraGetRay(u, v);
  pixel_color += rayColor(r, bounces);
  // }

  // float scale = 1.0 / params.fSamplesPerPixel;
  // pixel_color *= scale;
  //pixel_color = vec3(random());

  // gamma correction 2.0
  pixel_color = sqrt(pixel_color);

  //pixel_color               = randomVec3();
  //pixelBuffer.pixels[index] = vec4(pixel_color, 1.0);

  const uint pixelIndex = index.y * uint(params.fWidth) + index.x;
  pixelBuffer.pixels[pixelIndex] += vec4(pixel_color, 1.0);
}

/*

  0 1 2 3
0 * * * *
1 * * * *
2 * * * *
3 * * * *

11

*/
