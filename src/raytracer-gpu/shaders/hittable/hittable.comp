#ifndef HITTABLE_INC
#define HITTABLE_INC

#extension GL_GOOGLE_include_directive : enable

#define HITTABLETYPE_SPHERE 0
#define HITTABLETYPE_MOVINGSPHERE 1
#define HITTABLETYPE_XYRECT 2
#define HITTABLETYPE_XZRECT 3
#define HITTABLETYPE_YZRECT 4
#define HITTABLETYPE_BOX 5
#define HITTABLETYPE_CONSTANTMEDIUM 6

#include "../ray.comp"
#include "./hittable_base.comp"
#include "./sphere.comp"
#include "./rect.comp"

bool hitPrimitive(const Primitive primitve, const Ray ray, const float tMin, const float tMax, inout HitRecord rec) {
  uint primitiveType = primitve.primitiveType;

  mat4 rotationMatrix = mat4(
      primitve.modelMatrix[0],
      primitve.modelMatrix[1],
      primitve.modelMatrix[2],
      vec4(0.0, 0.0, 0.0, 1.0));

  Ray transformedRay = Ray(
      (inverse(primitve.modelMatrix) * vec4(ray.origin, 1.0)).xyz,
      (inverse(rotationMatrix) * vec4(ray.direction, 1.0)).xyz,
      // ray.direction,
      ray.time);

  bool hitted;

  switch (primitiveType) {
    case HITTABLETYPE_SPHERE:
      hitted = hitSphere(primitve, transformedRay, tMin, tMax, rec);
      break;
    case HITTABLETYPE_XYRECT:
      hitted = hitXYRect(primitve, transformedRay, tMin, tMax, rec);
      break;
    case HITTABLETYPE_XZRECT:
      hitted = hitXZRect(primitve, transformedRay, tMin, tMax, rec);
      break;
    case HITTABLETYPE_YZRECT:
      hitted = hitYZRect(primitve, transformedRay, tMin, tMax, rec);
      break;
  }

  if (hitted) {
    rec.p             = (primitve.modelMatrix * vec4(rec.p, 1.0)).xyz;
    vec3 transformedN = (rotationMatrix * vec4(rec.normal, 1.0)).xyz;
    setFaceNormal(rec, transformedRay, transformedN);
  }

  return hitted;
}

bool hittableListHit(const Ray ray, const float tMin, const float tMax, inout HitRecord rec) {
  HitRecord tempRec;
  bool      hitAnything  = false;
  float     closestSoFar = tMax;

  for (int i = 0; i < primitives.length(); i++) {
    if (hitPrimitive(primitives[i], ray, tMin, closestSoFar, tempRec)) {
      hitAnything  = true;
      closestSoFar = tempRec.t;
      rec          = tempRec;
    }
  }

  return hitAnything;
}

#endif  //HITTABLE_INC
