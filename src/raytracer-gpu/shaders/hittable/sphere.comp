#ifndef SPHERE_INC
#define SPHERE_INC

#extension GL_GOOGLE_include_directive : enable

#include "../ray.comp"
#include "../utils.comp"
#include "./hittable_base.comp"

bool hitSphere(const Primitive sphere, const Ray ray, const float tMin, const float tMax, inout HitRecord rec) {
  Ray transformedRay = transformRay(ray, sphere.objectToWorld);

  vec3  center       = sphere.center0.xyz;
  vec3  oc           = transformedRay.origin - center;
  float a            = lengthSquared(transformedRay.direction);
  float half_b       = dot(oc, transformedRay.direction);
  float c            = lengthSquared(oc) - sphere.radius * sphere.radius;
  float discriminant = half_b * half_b - a * c;

  if (discriminant > 0.0) {
    float root = sqrt(discriminant);
    float temp = (-half_b - root) / a;
    if (temp < tMax && temp > tMin) {
      rec.t               = temp;
      rec.p               = rayAt(transformedRay, rec.t);
      vec3 outward_normal = (rec.p - center) / sphere.radius;
      setFaceNormal(rec, transformedRay, outward_normal);
      vec2 uv           = getSphereUV(outward_normal);
      rec.uv            = uv;
      rec.materialIndex = sphere.materialIndex;
      transformRecord(rec, sphere.objectToWorld);
      return true;
    }
    temp = (-half_b + root) / a;
    if (temp < tMax && temp > tMin) {
      rec.t               = temp;
      rec.p               = rayAt(transformedRay, rec.t);
      vec3 outward_normal = (rec.p - center) / sphere.radius;
      setFaceNormal(rec, transformedRay, outward_normal);
      vec2 uv           = getSphereUV(outward_normal);
      rec.uv            = uv;
      rec.materialIndex = sphere.materialIndex;
      transformRecord(rec, sphere.objectToWorld);
      return true;
    }
  }

  return false;
}

#endif  // SPHERE_INC
