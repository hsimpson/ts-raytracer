#ifndef MOVINGSPHERE_INC
#define MOVINGSPHERE_INC

#extension GL_GOOGLE_include_directive : enable

#include "../ray.comp"
#include "../utils.comp"
#include "./hittable_base.comp"

vec3 center(const Primitive sphere, const float time) {
  vec3 center0 = sphere.center0.xyz;
  vec3 center1 = sphere.center1.xyz;

  float time0 = sphere.center0.w;
  float time1 = sphere.center1.w;

  float timeDiff   = (time - time0) / (time1 - time0);
  vec3  centerDiff = center1 - center0;

  return center0 + (centerDiff * timeDiff);
}

bool hitMovingSphere(const Primitive sphere, const Ray ray, const float tMin, const float tMax, inout HitRecord rec) {
  vec3  oc           = ray.origin - center(sphere, ray.time);
  float a            = lengthSquared(ray.direction);
  float half_b       = dot(oc, ray.direction);
  float c            = lengthSquared(oc) - sphere.radius * sphere.radius;
  float discriminant = half_b * half_b - a * c;

  if (discriminant > 0.0) {
    float root = sqrt(discriminant);
    float temp = (-half_b - root) / a;
    if (temp < tMax && temp > tMin) {
      rec.t               = temp;
      rec.p               = rayAt(ray, rec.t);
      vec3 outward_normal = (rec.p - center(sphere, ray.time)) / sphere.radius;
      setFaceNormal(rec, ray, outward_normal);
      vec2 uv           = getSphereUV(outward_normal);
      rec.uv            = uv;
      rec.materialIndex = sphere.materialIndex;
      return true;
    }
    temp = (-half_b + root) / a;
    if (temp < tMax && temp > tMin) {
      rec.t               = temp;
      rec.p               = rayAt(ray, rec.t);
      vec3 outward_normal = (rec.p - center(sphere, ray.time)) / sphere.radius;
      setFaceNormal(rec, ray, outward_normal);
      vec2 uv           = getSphereUV(outward_normal);
      rec.uv            = uv;
      rec.materialIndex = sphere.materialIndex;
      return true;
    }
  }

  return false;
}

#endif  //MOVINGSPHERE_INC
