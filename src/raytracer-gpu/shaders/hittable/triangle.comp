#ifndef TRIANGLE_INC
#define TRIANGLE_INC

#extension GL_GOOGLE_include_directive : enable

#include "../ray.comp"
#include "../utils.comp"
#include "./hittable_base.comp"

#define EPSILON 0.000001

#define TEST_CULL

const float kEpsilon = 1e-8;

/* from https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf */
bool hitTriangle(const Primitive tri, const Ray ray, const float tMin, const float tMax, inout HitRecord rec) {
  vec3 v0 = tri.v0.xyz;
  vec3 v1 = tri.v1.xyz;
  vec3 v2 = tri.v2.xyz;

  vec3 n0 = tri.n0.xyz;
  vec3 n1 = tri.n1.xyz;
  vec3 n2 = tri.n2.xyz;

  /* find vectors for two edges sharing vert */
  vec3 edge1 = v1 - v0;
  vec3 edge2 = v2 - v0;

  /* begin calculating determinant - also used to calculate U parameter */
  vec3 pvec = cross(ray.direction, edge2);

  /*if determinant is near zero, ray lies in plane of triangle */
  float det = dot(edge1, pvec);

#ifdef TEST_CULL

  if (det < EPSILON) {
    return false;
  }

  /* calculate distance from vert0 to ray origin */
  vec3 tvec = ray.origin - v0;

  /* calculate U parameter and test bounds */
  float u = dot(tvec, pvec);
  if (u < 0.0 || u > det) {
    return false;
  }

  /* prepare to test V parameter */
  vec3 qvec = cross(tvec, edge1);

  /* calculate V parameter and test bounds */
  float v = dot(ray.direction, qvec);
  if (v < 0.0 || u + v > det) {
    return false;
  }

  /* calculate t, scale parameters, ray intersects triangle */
  float t      = dot(edge2, qvec);
  float invDet = 1.0 / det;

  t *= invDet;
  u *= invDet;
  v *= invDet;

#else

  if (det > -EPSILON && det < EPSILON) {
    return false;  // ray is parallel to the tri
  }

  float invDet = 1.0 / det;
  /* calculate distance from vert0 to ray origin */
  vec3 tvec = ray.origin - v0;

  /* calculate U parameter and test bounds */
  float u = dot(tvec, pvec) * invDet;
  if (u < 0.0 || u > 1.0) {
    return false;
  }

  /* prepare to test V parameter */
  vec3 qvec = cross(tvec, edge1);

  /* calculate V parameter and test bounds */
  float v = dot(ray.direction, qvec) * invDet;
  if (v < 0.0 || u + v > 1.0) {
    return false;
  }

  /* calculate t, ray intersects triangle */
  float t = dot(edge2, qvec) * invDet;

#endif

  if (t < EPSILON) {
    return false;
  }

  rec.t             = t;
  rec.p             = rayAt(ray, rec.t);
  rec.materialIndex = tri.materialIndex;

  float w = 1.0 - u - v;

  n0 *= w;
  n1 *= u;
  n2 *= v;

  // mat3 normalMatrix = transpose(inverse(mat3(tri.modelMatrix)));

  // n0 = normalize(normalMatrix * n0);
  // n1 = normalize(normalMatrix * n1);
  // n2 = normalize(normalMatrix * n2);

  vec3 outwardNormal = normalize((n0 + n1 + n2).xyz);
  // setFaceNormal(rec, ray, outwardNormal);
  // setFaceNormal(rec, ray, n0);

  rec.normal    = outwardNormal;
  rec.frontFace = true;

  // FIXME: this is only a hack, to avoid backfacing faces to show up
  // if (!rec.frontFace) {
  //   return false;
  // }

  return true;
}

#endif  // TRIANGLE_INC
