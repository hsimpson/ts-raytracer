#ifndef UTILS_INC
#define UTILS_INC

#define PI 3.1415926538

/*
vec2 _seed;

void initSeed(vec2 seed) {
  _seed = seed;
}

float random() {
  _seed.x = fract(sin(dot(_seed.xy, vec2(12.9898, 78.233))) * 43758.5453);
  _seed.y = fract(sin(dot(_seed.xy, vec2(12.9898, 78.233))) * 43758.5453);

  return _seed.x;
}
*/

// https://indico.cern.ch/event/93877/contributions/2118070/attachments/1104200/1575343/acat3_revised_final.pdf
uint _seed;

void initSeed(uint seed) {
  _seed = seed;
}

uint tauStep(uint z, int s1, int s2, int s3, uint M) {
  uint b   = (((z << s1) ^ z) >> s2);
  return z = (((z & M) << s3) ^ b);
}

float random() {
  uint z1, z2, z3, z4, r;
  z1    = tauStep(_seed, 13, 19, 12, 429496729U);
  z2    = tauStep(_seed, 2, 25, 4, 4294967288U);
  z3    = tauStep(_seed, 3, 11, 17, 429496280U);
  z4    = (1664525U * _seed + 1013904223U);
  _seed = (z1 ^ z2 ^ z3 ^ z4);
  return float(_seed) * 2.3283064365387e-10;
}

float random(float min, float max) {
  return min + (max - min) * random();
}

vec3 randomVec3() {
  return vec3(random(), random(), random());
}

vec3 randomVec3(float min, float max) {
  return vec3(random(min, max), random(min, max), random(min, max));
}

float lengthSquared(const vec3 v) {
  return v.x * v.x + v.y * v.y + v.z * v.z;
}

vec3 randomInUnitSphere() {
  bool notInSphere = true;
  vec3 p;
  while (notInSphere) {
    p = randomVec3(-1.0, 1.0);
    if (lengthSquared(p) < 1.0)
      notInSphere = false;
  }
  return p;
}

vec3 randomUnitVector() {
  float a = random(0.0, 2.0 * PI);
  float z = random(-1.0, 1.0);
  float r = sqrt(1.0 - z * z);
  return vec3(r * cos(a), r * sin(a), z);
}

vec3 randomInHemisphere(const vec3 normal) {
  vec3 inUnitSphere = randomInUnitSphere();
  if (dot(inUnitSphere, normal) > 0.0) {  // In the same hemisphere as the normal
    return inUnitSphere;
  } else {
    return -inUnitSphere;
  }
}

vec3 randomInUnitDisc() {
  vec3 p = vec3(random(-1.0, 1.0), random(-1.0, 1.0), 0.0);
  return normalize(p);
}

vec2 getSphereUV(vec3 p) {
  float phi   = atan(p.z, p.x);
  float theta = asin(p.y);
  vec2  uv;
  uv.x = 1.0 - (phi + PI) / (2.0 * PI);
  uv.y = (theta + PI / 2.0) / PI;
  return uv;
}

#endif  //UTILS_INC
